// Restrict further input once specified max length is reached
@ Uses @keypress
<template>
  <div>
    <b-form-group label="Enter up to 10 digits:">
      <b-form-input
        v-model="numberInput"
        type="number"
        @keypress="checkLength"
        placeholder="Enter digits"
      />
    </b-form-group>

    <b-button @click="submitNumber" variant="primary"> Submit </b-button>
  </div>
</template>

<script>
import { BFormGroup, BFormInput, BButton } from "bootstrap-vue-next";

export default {
  components: {
    BFormGroup,
    BFormInput,
    BButton,
  },
  data() {
    return {
      numberInput: "", // Bound to the input field
      maxLength: 10, // Maximum allowed length
    };
  },
  methods: {
    // Method to restrict keypress after reaching max length
    checkLength(event) {
      if (this.numberInput.length >= this.maxLength) {
        event.preventDefault(); // Prevent further keypresses
      }
    },
    submitNumber() {
      console.log("Number submitted:", this.numberInput);
    },
  },
};
</script>

Explanation:
@keypress="checkLength": This event handler is triggered every time a key is pressed. 

Inside checkLength, it checks if the input length has reached or exceeded the maxLength (10 digits in this case).

event.preventDefault(): If the length has reached the limit, this method prevents the keypress from being registered, effectively blocking further input.

numberInput.length >= maxLength: The length of the numberInput is checked, and if it's equal to or greater than the max length, the keypress is blocked.

Important Consideration:
This approach works best for numerical and text inputs where you need strict control over the number of characters.

For non-numerical input types, you may need to handle backspace or other keypresses differently, but for type="number", the browser generally restricts non-numeric input already.

This approach guarantees that the user is prevented from typing more than the allowed characters in real-time, and it gives you complete control over the keypress behavior.


// Another sample, but does not work
// Uses @input
<template>
  <div>
    <b-form-group label="Enter up to 10 digits:">
      <b-form-input
        v-model="numberInput"
        type="number"
        @input="limitInputLength"
        placeholder="Enter digits"
      />
    </b-form-group>

    <b-button @click="submitNumber" variant="primary">Submit</b-button>
  </div>
</template>

<script>
import { BFormGroup, BFormInput, BButton } from "bootstrap-vue-next";

export default {
  components: {
    BFormGroup,
    BFormInput,
    BButton,
  },
  data() {
    return {
      numberInput: "", // Bound to the input field
      maxLength: 10, // Maximum allowed length
    };
  },
  methods: {
    // Method to limit input length using the @input event
    limitInputLength(event) {
      const inputValue = event.target.value;

      // If the input exceeds the max length, truncate it
      if (inputValue.length > this.maxLength) {
        this.numberInput = inputValue.slice(0, this.maxLength);
      }
    },
    submitNumber() {
      console.log("Number submitted:", this.numberInput);
    },
  },
};
</script>


// Only limits after submit
// Uses @input
<template>
  <div>
    <b-form-group label="Enter up to 10 digits:">
      <b-form-input
        v-model="numberInput"
        type="number"
        :maxlength="10"   <!-- Optional, but can help with visual cues -->
        @input="validateInput"
        placeholder="Enter digits"
      />
    </b-form-group>

    <b-button @click="submitNumber" variant="primary">
      Submit
    </b-button>
  </div>
</template>

<script>
export default {
  data() {
    return {
      numberInput: ''
    };
  },
  methods: {
    validateInput(event) {
      const inputValue = event.target.value;

      // Ensure input is digits only and max length of 10 digits
      if (inputValue.length > 10) {
        this.numberInput = inputValue.slice(0, 10); // Limit to 10 digits
      } else {
        this.numberInput = inputValue; // Set the value if it's within the limit
      }
    },
    submitNumber() {
      console.log("Number submitted:", this.numberInput);
    }
  }
};
</script>
