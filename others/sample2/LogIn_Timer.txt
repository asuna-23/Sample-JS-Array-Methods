<template>
  <div class="app">
    <!-- Login Form -->
    <div v-if="!isLoggedIn" class="login">
      <h2>Please Login</h2>
      <form @submit.prevent="login">
        <div>
          <label for="username">Username:</label>
          <input type="text" v-model="form.username" required />
        </div>
        <div>
          <label for="pin">PIN:</label>
          <input type="password" v-model="form.pin" required />
        </div>
        <button type="submit">Login</button>
        <p v-if="loginError" class="error">{{ loginError }}</p>
      </form>
    </div>

    <!-- Timer and Logout Section -->
    <div v-else class="logout">
      <h2>Welcome, {{ currentAccount.owner }}!</h2>
      <div class="timer">
        <h2>Session Countdown</h2>
        <div class="time-display">
          <span>{{ minutes }}:{{ seconds }}</span>
        </div>
      </div>
      <button @click="logout">Logout</button>
    </div>
  </div>
</template>

<script>
import { ACCOUNTS } from "./common/rBankAccounts"; // Import the existing accounts

export default {
  data() {
    return {
      isLoggedIn: false,
      totalTime: 300, // 5 minutes in seconds
      remainingTime: 300, // Time left to count down
      timer: null,
      isRunning: false,
      existingAccounts: [...ACCOUNTS], // All available accounts
      currentAccount: null, // Store the logged-in account details
      form: {
        username: "",
        pin: ""
      },
      loginError: null // Error message for incorrect login
    };
  },
  computed: {
    minutes() {
      return Math.floor(this.remainingTime / 60)
        .toString()
        .padStart(2, "0");
    },
    seconds() {
      return (this.remainingTime % 60).toString().padStart(2, "0");
    }
  },
  methods: {
    validateAccount() {
      // Find the account with matching username and pin
      const account = this.existingAccounts.find(
        acc => acc.username === this.form.username && acc.pin === this.form.pin
      );
      if (account) {
        this.currentAccount = account; // Set the matched account
        return true;
      } else {
        this.loginError = "Invalid username or pin."; // Set error message if no match
        return false;
      }
    },
    login() {
      // Validate the account
      if (this.validateAccount()) {
        this.isLoggedIn = true;
        this.loginError = null; // Clear any previous error message
        this.startTimer(); // Start the timer upon login
      }
    },
    logout() {
      this.isLoggedIn = false;
      this.resetTimer(); // Reset and stop the timer upon logout
      this.form.username = ""; // Clear form input fields
      this.form.pin = "";
      this.currentAccount = null; // Clear the current account details
    },
    startTimer() {
      if (!this.isRunning && this.remainingTime > 0) {
        this.isRunning = true;
        this.timer = setInterval(() => {
          if (this.remainingTime > 0) {
            this.remainingTime--;
          } else {
            this.autoLogout(); // Auto logout when time reaches 0
          }
        }, 1000);
      }
    },
    resetTimer() {
      this.stopTimer();
      this.remainingTime = this.totalTime; // Reset to initial 5 minutes
      this.isRunning = false;
    },
    stopTimer() {
      clearInterval(this.timer); // Clear the timer
    },
    autoLogout() {
      this.stopTimer(); // Stop the timer
      alert("Session expired. Logging out...");
      this.logout(); // Auto logout the user
    },

    /* Alternative for logout and stopping timer */
    /*
    logout() {
      this.stopTimer(); // Make sure to stop the timer on logout
      this.isLoggedIn = false;
      this.resetTimer(); // Reset the timer when logging out
      this.currentAccount = null; // Clear the current account
    },
    stopTimer() {
      if (this.timer) {
        clearInterval(this.timer); // Clear the timer
        this.timer = null;
      }
    },
    autoLogout() {
      this.stopTimer();
      alert("Session expired. Logging out...");
      this.logout(); // Auto logout the user
    }
    */
  },
 
};
</script>

<style scoped>
.app {
  text-align: center;
}
.login, .logout {
  margin: 20px;
}
.timer {
  margin: 10px 0;
  font-family: Arial, sans-serif;
}
.time-display {
  font-size: 2rem;
  margin: 10px 0;
}
button {
  margin: 10px;
  padding: 10px 20px;
  font-size: 1rem;
}
.error {
  color: red;
}
</style>
