<template>
  <div class="app">
    <!-- Login Form -->
    <div v-if="!isLoggedIn" class="login">
      <h2>Please Login</h2>
      <form @submit.prevent="login">
        <div>
          <label for="username">Username:</label>
          <input type="text" v-model="form.username" required />
        </div>
        <div>
          <label for="pin">PIN:</label>
          <input type="password" v-model="form.pin" required />
        </div>
        <button type="submit">Login</button>
        <p v-if="loginError" class="error">{{ loginError }}</p>
      </form>
    </div>

    <!-- Timer, Account Info, and Logout Section -->
    <div v-else class="logout">
  <h2>Welcome, {{ currentAccount.owner }}!</h2>
  <div class="timer">
    <h2>Session Countdown</h2>
    <div class="time-display">
      <span>{{ minutes }}:{{ seconds }}</span>
    </div>
  </div>

  <!-- Display balance, incomes, outgoings, and interest -->
  <div class="account-summary">
    <h3>Account Summary</h3>
    <p><strong>Balance:</strong> {{ balance }}</p>
    <p><strong>Total Income:</strong> {{ incomes }}</p>
    <p><strong>Total Outgoing:</strong> {{ outgoings }}</p>
    <p><strong>Interest Earned:</strong> {{ interest }}</p>
  </div>

  <button @click="logout">Logout</button>
</div>
  </div>
</template>


<script>
import { ACCOUNTS } from "./common/rBankAccounts"; // Import the existing accounts

export default {
  data() {
    return {
      isLoggedIn: false,
      totalTime: 300, // 5 minutes in seconds
      remainingTime: 300, // Time left to count down
      timer: null,
      isRunning: false,
      existingAccounts: [...JSON.parse(JSON.stringify(ACCOUNTS))], // All available accounts
      currentAccount: null, // Store the logged-in account details
      form: {
        username: "",
        pin: ""
      },
      loginError: null, // Error message for incorrect login
      balance: 0, // Current balance
      incomes: 0, // Total incomes
      outgoings: 0, // Total outgoings
      interest: 0 // Store the calculated interest
    };
  },
  computed: {
    minutes() {
      return Math.floor(this.remainingTime / 60)
        .toString()
        .padStart(2, "0");
    },
    seconds() {
      return (this.remainingTime % 60).toString().padStart(2, "0");
    }
  },
  methods: {
    validateAccount() {
      // Find the account with matching username and pin
      const account = this.existingAccounts.find(
        acc => acc.username === this.form.username && acc.pin === this.form.pin
      );
      if (account) {
        this.currentAccount = account; // Set the matched account
        this.calculateMovements(); // Calculate balance, incomes, and outgoings, interest
        return true;
      } else {
        this.loginError = "Invalid username or pin."; // Set error message if no match
        return false;
      }
    },
    login() {
    // Validate the account
    if (this.validateAccount()) {
      this.isLoggedIn = true;
      this.loginError = null; // Clear any previous error message
      this.startTimer(); // Start the timer upon login

      // Call the function to calculate all movements
      //this.calculateMovements();
    }
  },
  // Method to calculate balance, incomes, outgoings, and interest
  calculateMovements() {
    const movements = this.currentAccount.movements;

    // Helper function to format currency
    const formatCurrency = (value) => {
      return new Intl.NumberFormat(this.currentAccount.locale, {
        style: 'currency',
        currency: this.currentAccount.currency,
      }).format(value);
    };

    // Calculate total balance
    const balance = movements.reduce((acc, curr) => acc + curr.movementValue, 0);
    this.balance = formatCurrency(balance);
    
    // Calculate total incomes (deposits)
    const incomes = movements
      .filter(mov => mov.movementType === 'deposit')
      .reduce((acc, curr) => acc + curr.movementValue, 0);
    this.incomes = formatCurrency(incomes);
    
    // Calculate total outgoings (withdrawals)
    const outgoings = movements
      .filter(mov => mov.movementType === 'withdrawal')
      .reduce((acc, curr) => acc + Math.abs(curr.movementValue), 0);
    this.outgoings = formatCurrency(outgoings);
    
    // Calculate total interest on deposits
    const interest = movements
      .filter(mov => mov.movementType === 'deposit')
      .reduce((acc, curr) => acc + (curr.movementValue * this.currentAccount.interest) / 100, 0);
    this.interest = formatCurrency(interest);
  },

  // Method to calculate balance, incomes, outgoings, and interest
  /*calculateMovements() {
    const movements = this.currentAccount.movements;
    
    // Calculate total balance
    this.balance = movements.reduce((acc, curr) => acc + curr.movementValue, 0);
    
    // Calculate total incomes (deposits)
    this.incomes = movements
      .filter(mov => mov.movementType === 'deposit')
      .reduce((acc, curr) => acc + curr.movementValue, 0);
    
    // Calculate total outgoings (withdrawals)
    this.outgoings = movements
      .filter(mov => mov.movementType === 'withdrawal')
      .reduce((acc, curr) => acc + Math.abs(curr.movementValue), 0);
    
    // Calculate total interest on deposits
    this.interest = movements
      .filter(mov => mov.movementType === 'deposit')
      .reduce((acc, curr) => acc + (curr.movementValue * this.currentAccount.interest) / 100, 0);
  },
  */
    logout() {
      this.isLoggedIn = false;
      this.resetTimer(); // Reset and stop the timer upon logout
      this.form.username = ""; // Clear form input fields
      this.form.pin = "";
      this.currentAccount = null; // Clear the current account details
      this.balance = 0;
      this.incomes = 0;
      this.outgoings = 0;
    },
    startTimer() {
      if (!this.isRunning && this.remainingTime > 0) {
        this.isRunning = true;
        this.timer = setInterval(() => {
          if (this.remainingTime > 0) {
            this.remainingTime--;
          } else {
            this.autoLogout(); // Auto logout when time reaches 0
          }
        }, 1000);
      }
    },
    resetTimer() {
      this.stopTimer();
      this.remainingTime = this.totalTime; // Reset to initial 5 minutes
      this.isRunning = false;
    },
    stopTimer() {
      clearInterval(this.timer); // Clear the timer
    },
    autoLogout() {
      this.stopTimer(); // Stop the timer
      alert("Session expired. Logging out...");
      this.logout(); // Auto logout the user
    },

    // Calculate the user's balance, incomes, and outgoings
    /*calculateAccountSummary() {
      if (this.currentAccount && this.currentAccount.movements) {
        // Calculate the total balance
        this.balance = this.currentAccount.movements.reduce(
          (acc, mov) => acc + mov.movementValue, 0
        );

        // Calculate total incomes (positive movements)
        this.incomes = this.currentAccount.movements
          .filter(mov => mov.movementValue > 0)
          .reduce((acc, mov) => acc + mov.movementValue, 0);

        // Calculate total outgoings (negative movements)
        this.outgoings = this.currentAccount.movements
          .filter(mov => mov.movementValue < 0)
          .reduce((acc, mov) => acc + Math.abs(mov.movementValue), 0);
      }
    } */
  }
};
</script>


<style scoped>
.app {
  text-align: center;
}
.login, .logout {
  margin: 20px;
}
.timer {
  margin: 10px 0;
  font-family: Arial, sans-serif;
}
.time-display {
  font-size: 2rem;
  margin: 10px 0;
}
button {
  margin: 10px;
  padding: 10px 20px;
  font-size: 1rem;
}
.error {
  color: red;
}

.account-summary {
  margin: 20px 0;
}
.account-summary p {
  font-size: 1.2rem;
  margin: 5px 0;
}

</style>
